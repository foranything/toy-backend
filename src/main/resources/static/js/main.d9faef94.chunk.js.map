{"version":3,"sources":["assets/sample.png","components/GlobalStyles.tsx","layouts/Sidebar/index.tsx","components/Users/Profile.tsx","pages/Home.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","GlobalStyles","createGlobalStyle","reset","SidebarComponent","Container","icon","faUser","className","faComment","faEllipsisH","React","Component","styled","div","Profile","props","state","MyProfile","src","this","profileImgSrc","alt","Text","id","Home","Header","InputGroup","children","Icon","name","color","Input","placeholder","sampleImg","Divider","map","e","customHistory","createBrowserHistory","App","history","ThemeProvider","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,oC,8QCG3C,IAIeC,EAJMC,4BAAH,IACdC,K,kZCKiBC,E,uKAEjB,OACE,kBAACC,EAAD,KACE,kBAAC,IAAD,CAAiBC,KAAMC,IAAQC,UAAU,WACzC,kBAAC,IAAD,CAAiBF,KAAMG,MACvB,kBAAC,IAAD,CAAiBH,KAAMI,W,GANeC,IAAMC,WAY9CP,EAAYQ,UAAOC,IAAV,K,2WCXMC,E,kDACnB,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IACDC,MAAQ,GAFW,E,qDAMxB,OACE,kBAACC,EAAD,KACE,8BACE,yBAAKC,IAAKC,KAAKJ,MAAMK,cAAeC,IAAI,YAE1C,kBAACC,EAAA,EAAD,KAAOH,KAAKJ,MAAMQ,S,GAZWb,IAAMC,WAkBrCM,EAAYL,UAAOC,IAAV,K,iuBCfMW,E,uKAWjB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,6BACE,kBAACC,EAAD,KACE,4CACA,kBAACC,EAAA,EAAD,CAAYnB,UAAU,SACpB,kBAAC,IAAD,CACEoB,SAAU,kBAACC,EAAA,EAAD,CAAMC,KAAK,SAASC,MAAM,eAEtC,kBAACC,EAAA,EAAD,CAAOC,YAAY,gCAGvB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAST,GAAG,qBAAMH,cAAea,OAEnC,kBAACC,EAAD,KACE,8BA1BgB,CACtB,QACA,MACA,OACA,SACA,OACA,MACA,SAqBWC,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,CAASb,GAAIa,EAAGhB,cAAea,e,GA/BTvB,IAAMC,WAuClCP,EAAYQ,UAAOC,IAAV,KAITY,EAASb,UAAOC,IAAV,KAoBNI,EAAYL,UAAOC,IAAV,KAMTqB,EAAUtB,UAAOC,IAAV,K,QC3EPwB,EAAgBC,cACDC,E,uKAEjB,OACE,kBAAC,IAAD,CAAQC,QAASH,GACf,kBAAC,IAAD,KACE,kBAACI,EAAA,EAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpB,MAGrC,kBAAC,EAAD,W,GATyBd,IAAMC,WCRnBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCDNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d9faef94.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sample.b0c3840c.png\";","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n  ${reset};\r\n`;\r\n\r\nexport default GlobalStyles;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faUser,\r\n  faComment,\r\n  faEllipsisH,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default class SidebarComponent extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <FontAwesomeIcon icon={faUser} className=\"active\" />\r\n        <FontAwesomeIcon icon={faComment} />\r\n        <FontAwesomeIcon icon={faEllipsisH} />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst Container = styled.div`\r\n  background-color: #ececed;\r\n  height: 100vh;\r\n  padding: 47px 24px;\r\n  font-size: 20px;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: column;\r\n  svg {\r\n    cursor: pointer;\r\n    margin-bottom: 38px;\r\n    opacity: 0.3;\r\n  }\r\n  .active {\r\n    opacity: 1;\r\n  }\r\n`;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Text } from \"@chakra-ui/core\";\n\ninterface Props {\n  profileImgSrc: string;\n  id: string;\n}\ninterface State {}\n\nexport default class Profile extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <MyProfile>\n        <span>\n          <img src={this.props.profileImgSrc} alt=\"sample\" />\n        </span>\n        <Text>{this.props.id}</Text>\n      </MyProfile>\n    );\n  }\n}\n\nconst MyProfile = styled.div`\n  display: flex;\n  :hover {\n    background-color: #f2f2f3;\n    cursor: pointer;\n  }\n  span {\n    padding: 8px 10px 8px 20px;\n\n    img {\n      border-radius: 15px;\n      width: 40px;\n    }\n  }\n  p {\n    font-size: 12px;\n    line-height: 62px;\n  }\n`;\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  Icon,\r\n  Text,\r\n} from \"@chakra-ui/core\";\r\nimport Sidebar from \"../layouts/Sidebar\";\r\nimport sampleImg from \"../assets/sample.png\";\r\nimport Profile from \"../components/Users/Profile\";\r\n\r\nexport default class Home extends React.Component {\r\n  render() {\r\n    const users: string[] = [\r\n      \"Frodo\",\r\n      \"Neo\",\r\n      \"Tube\",\r\n      \"Apeach\",\r\n      \"Muzi\",\r\n      \"Con\",\r\n      \"Jay-G\",\r\n    ];\r\n    return (\r\n      <Container>\r\n        <Sidebar />\r\n        <div>\r\n          <Header>\r\n            <h1>친구</h1>\r\n            <InputGroup className=\"group\">\r\n              <InputLeftElement\r\n                children={<Icon name=\"search\" color=\"gray.300\" />}\r\n              />\r\n              <Input placeholder=\"이름 검색\" />\r\n            </InputGroup>\r\n          </Header>\r\n          <MyProfile>\r\n            <Profile id=\"아이디\" profileImgSrc={sampleImg} />\r\n          </MyProfile>\r\n          <Divider>\r\n            <hr />\r\n          </Divider>\r\n          {users.map((e) => (\r\n            <Profile id={e} profileImgSrc={sampleImg} />\r\n          ))}\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  width: 90vw;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  padding: 46px 20px 15px;\r\n  .group {\r\n    margin-top: 13px;\r\n    svg {\r\n      margin-top: -8px;\r\n    }\r\n    input {\r\n      border: 1px solid #eff0f2;\r\n      border-radius: 20px;\r\n      background-color: #f9f9f9;\r\n      height: 26px;\r\n      font-size: 12px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst MyProfile = styled.div`\r\n  span img {\r\n    width: 50px;\r\n  }\r\n`;\r\n\r\nconst Divider = styled.div`\r\n  padding: 0 20px;\r\n  hr {\r\n    border: 1px solid #f2f2f2;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport GlobalStyles from \"./components/GlobalStyles\";\r\nimport { Home } from \"./pages\";\r\nimport { ThemeProvider } from \"@chakra-ui/core\";\r\n\r\nconst customHistory = createBrowserHistory();\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Router history={customHistory}>\r\n        <Switch>\r\n          <ThemeProvider>\r\n            <Route exact path=\"/\" component={Home} />\r\n          </ThemeProvider>\r\n        </Switch>\r\n        <GlobalStyles />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n","const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}